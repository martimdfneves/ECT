use p2g5;

-- Drop Section
DROP FUNCTION BIKES_FROM_STAND;
DROP FUNCTION BIKES_FROM_MOTOSTATION;
DROP FUNCTION CLIENT_RENTS;
DROP FUNCTION STAFF_INFO;
DROP FUNCTION SALESMAN_FROM_STAND;
DROP FUNCTION MECHANIC_FROM_WORKSHOP;
DROP FUNCTION SALES_FROM_SALESMAN;
DROP FUNCTION REVISIONS_FROM_MECHANIC;
DROP FUNCTION FULL_STOCK_MOTORCYCLE_INFO;
DROP FUNCTION FULL_RENT_MOTORCYCLE_INFO;
DROP FUNCTION STAND_NAME;
DROP FUNCTION MOTOSTATION_NAME;
DROP FUNCTION CLIENTS_RENTS;
DROP FUNCTION CLIENTS_BIKES;
DROP FUNCTION CLIENTS_REVISIONS;
DROP FUNCTION REVISION_PARTS;
DROP FUNCTION SALE_DETAILED;
DROP FUNCTION REVISION_DETAILED;
DROP FUNCTION RENT_DETAILED;
DROP FUNCTION MOST_EXPENSIVE_BIKE;
DROP FUNCTION BIKES_TIMES_RENTED;
DROP FUNCTION MOST_RENTED_BIKE;
DROP FUNCTION BEST_SALESMAN;
DROP FUNCTION BEST_MECHANIC;
DROP FUNCTION AVERAGE_PARTS;
DROP FUNCTION MOST_ACTIVE_CLIENT;

-- UDF's
GO
CREATE FUNCTION BIKES_FROM_STAND(@stand INT) returns @Bike_table Table
												(Frame_no INT, Localization varchar(30), Motorcycle varchar(50), Price INT) 
AS
BEGIN

	IF(@stand = -1)
	BEGIN
		INSERT @Bike_table SELECT STOCK_BIKE.FRAME_NO, LOCALIZATION As Stand, BRAND + ' ' + MODEL + ' ' + CONVERT(varchar, CC) AS Motorcycle, PRICE As Price
			FROM ((MOTORCYCLE JOIN STOCK_BIKE ON MOTORCYCLE.FRAME_NO=STOCK_BIKE.FRAME_NO)
			JOIN STAND ON STOCK_BIKE.STAND=STAND.NUMBER)
	END
	ELSE
	BEGIN
		INSERT @Bike_table SELECT STOCK_BIKE.FRAME_NO, LOCALIZATION As Stand, BRAND + ' ' + MODEL + ' ' + CONVERT(varchar, CC) AS Motorcycle, PRICE As Price
			FROM ((MOTORCYCLE JOIN STOCK_BIKE ON MOTORCYCLE.FRAME_NO=STOCK_BIKE.FRAME_NO)
			JOIN STAND ON STOCK_BIKE.STAND=STAND.NUMBER)
			WHERE STAND.NUMBER = @stand;
	END
	RETURN;
END
GO
-- Test function
-- select * FROM BIKES_FROM_STAND(-1);
---------------------------------------------------

GO
CREATE FUNCTION BIKES_FROM_MOTOSTATION(@motostation INT) returns @Bike_table Table
												(Frame_no INT, Localization varchar(30), Motorcycle varchar(50), Price_km INT,
												Total_km INT) 
AS
BEGIN
	IF(@motostation = -1)
	BEGIN
		INSERT @Bike_table SELECT RENTABLE_BIKE.FRAME_NO, LOCALIZATION As Motostation, BRAND + ' ' + MODEL + ' ' + CONVERT(varchar, CC) AS Motorcycle, PRICE_KM As Price_km,
			TOTAL_KM As Total_km
			FROM ((MOTORCYCLE JOIN RENTABLE_BIKE ON MOTORCYCLE.FRAME_NO=RENTABLE_BIKE.FRAME_NO)
			JOIN MOTO_STATION ON RENTABLE_BIKE.MOTO_STATION=MOTO_STATION.NUMBER)
	END
	ELSE
	BEGIN
		INSERT @Bike_table SELECT RENTABLE_BIKE.FRAME_NO,LOCALIZATION As Motostation, BRAND + ' ' + MODEL + ' ' + CONVERT(varchar, CC) AS Motorcycle, PRICE_KM As Price_km,
			TOTAL_KM As Total_km
			FROM ((MOTORCYCLE JOIN RENTABLE_BIKE ON MOTORCYCLE.FRAME_NO=RENTABLE_BIKE.FRAME_NO)
			JOIN MOTO_STATION ON RENTABLE_BIKE.MOTO_STATION=MOTO_STATION.NUMBER)
			WHERE MOTO_STATION.NUMBER=@motostation;
	END
	RETURN;
END

GO
-- Test function
-- select * FROM BIKES_FROM_MOTOSTATION(0);
---------------------------------------------------

GO
CREATE FUNCTION CLIENT_RENTS(@Client INT) Returns Table
AS
	RETURN (SELECT C_NAME As Client, BRAND + ' ' + MODEL + ' ' + CONVERT(varchar, CC) AS Motorcycle, R_DATE as Rent_Date
	FROM ((CLIENT JOIN RENT ON CLIENT.NIF = RENT.CLIENT)
	JOIN MOTORCYCLE ON RENT.FRAME_NO=MOTORCYCLE.FRAME_NO)
	WHERE CLIENT.NIF = @Client);
GO
-- Test function
-- select * from CLIENT_RENTS(268102165);
---------------------------------------------------

GO
CREATE FUNCTION STAFF_INFO(@Staff_nr INT) Returns Table
AS
	RETURN (SELECT S_NAME, S_ADDRESS 
		    FROM STAFF_MEMBER
			WHERE NUMBER = @Staff_nr);
GO
---------------------------------------------------

GO 
CREATE FUNCTION SALESMAN_FROM_STAND(@Stand INT) Returns Table
AS
	RETURN (SELECT SALESMAN.NUMBER AS ID, S_NAME AS Name, S_ADDRESS as Address
	FROM (SALESMAN JOIN STAFF_MEMBER ON SALESMAN.NUMBER = STAFF_MEMBER.NUMBER)
	WHERE WORK_STAND = @Stand);
GO
-- Test function
-- SELECT * FROM SALESMAN_FROM_STAND(4);
---------------------------------------------------

GO 
CREATE FUNCTION MECHANIC_FROM_WORKSHOP(@Workshop INT) Returns Table
AS
	RETURN (SELECT MECHANIC.NUMBER AS ID, S_NAME AS Name, S_ADDRESS as Address
	FROM (MECHANIC JOIN STAFF_MEMBER ON MECHANIC.NUMBER = STAFF_MEMBER.NUMBER)
	WHERE WORK_WORKSHOP = @Workshop);
GO
-- Test Function
-- SELECT * FROM MECHANIC_FROM_WORKSHOP(1);
---------------------------------------------------

GO
CREATE FUNCTION SALES_FROM_SALESMAN(@Salesman INT) Returns Table
AS
	RETURN(SELECT INVOICE_NO AS Invoice, S_DATE AS Date, C_NAME AS Client, BRAND + ' ' + MODEL AS Motorcycle, CC, HP, YEAR AS Year,
	SALE.PRICE AS Price
	FROM ((((SALE JOIN SALESMAN ON SELLER=SALESMAN.NUMBER)
	JOIN STAFF_MEMBER ON STAFF_MEMBER.NUMBER=SALESMAN.NUMBER)
	JOIN MOTORCYCLE ON MOTORCYCLE.FRAME_NO = SALE.MOTORCYCLE)
	JOIN CLIENT ON CLIENT.NIF=SALE.CLIENT)
	WHERE SALESMAN.NUMBER=@Salesman);
GO
-- Test Function
-- SELECT * FROM SALES_FROM_SALESMAN(107);
---------------------------------------------------

GO
CREATE FUNCTION REVISIONS_FROM_MECHANIC(@Mechanic INT) Returns Table
AS
	RETURN(SELECT REVISION.REVISION_NO AS Number, REVISION.R_DATE AS Date, BRAND + ' ' + MODEL AS Motorcycle, CC, HP, YEAR AS Year, 
	C_NAME AS Owner, PRICE AS Price, COUNT(*) AS Parts
	FROM (((((((REVISION JOIN MECHANIC ON REVISION.MECHANIC=MECHANIC.NUMBER)
	JOIN STAFF_MEMBER ON MECHANIC.NUMBER = STAFF_MEMBER.NUMBER)
	JOIN WORKSHOP ON MECHANIC.WORK_WORKSHOP=WORKSHOP.NUMBER)
	LEFT OUTER JOIN OWNED_BIKE ON REVISION.FRAME_NO=OWNED_BIKE.FRAME_NO)
	JOIN MOTORCYCLE ON MOTORCYCLE.FRAME_NO=REVISION.FRAME_NO)
	LEFT OUTER JOIN CLIENT ON OWNED_BIKE.B_OWNER=CLIENT.NIF)
	JOIN CHANGED_PARTS ON REVISION.REVISION_NO=CHANGED_PARTS.REVISION_NO)
	WHERE REVISION.MECHANIC=@Mechanic
	GROUP BY REVISION.REVISION_NO, REVISION.R_DATE, BRAND, MODEL, CC, HP, YEAR, C_NAME, PRICE);
GO
-- Test Function
-- SELECT * FROM REVISIONS_FROM_MECHANIC(619);
------------------------------------------------

GO
CREATE FUNCTION FULL_STOCK_MOTORCYCLE_INFO(@Frame INT) Returns TABLE
AS
	RETURN (SELECT MOTORCYCLE.FRAME_NO, BRAND, MODEL, YEAR, CC, HP, PRICE, LOCALIZATION
		    FROM ((MOTORCYCLE JOIN STOCK_BIKE ON MOTORCYCLE.FRAME_NO = STOCK_BIKE.FRAME_NO)
			JOIN STAND ON STAND.NUMBER=STOCK_BIKE.STAND)
			WHERE MOTORCYCLE.FRAME_NO = @Frame) 
GO
------------------------------------------

GO
CREATE FUNCTION FULL_RENT_MOTORCYCLE_INFO(@Frame INT) Returns TABLE
AS
	RETURN (SELECT MOTORCYCLE.FRAME_NO, BRAND, MODEL, YEAR, CC, HP, PRICE_KM, TOTAL_KM, LOCALIZATION
		    FROM ((MOTORCYCLE JOIN RENTABLE_BIKE ON MOTORCYCLE.FRAME_NO = RENTABLE_BIKE.FRAME_NO)
			JOIN MOTO_STATION ON MOTO_STATION.NUMBER=RENTABLE_BIKE.MOTO_STATION)
			WHERE MOTORCYCLE.FRAME_NO = @Frame) 

GO
--------------------------------------------

GO
CREATE FUNCTION STAND_NAME(@Stand INT) Returns TABLE
AS
	RETURN (SELECT LOCALIZATION FROM STAND WHERE NUMBER=@Stand);
GO
---------------------------------------------

GO
CREATE FUNCTION MOTOSTATION_NAME(@ms INT) Returns TABLE
AS
	RETURN (SELECT LOCALIZATION FROM MOTO_STATION WHERE NUMBER=@ms);
GO
-------------------------------------------

GO
CREATE FUNCTION CLIENTS_BIKES(@client INT) Returns TABLE
AS
	RETURN (SELECT BRAND + ' ' + MODEL AS Motorcycle, LICENSE_PLATE As 'License Plate', TOTAL_KM As 'Total Km' 
	FROM OWNED_BIKE JOIN MOTORCYCLE ON OWNED_BIKE.FRAME_NO = MOTORCYCLE.FRAME_NO
	WHERE OWNED_BIKE.B_OWNER=@client);

GO
-------------------------------------------

GO
CREATE FUNCTION CLIENTS_RENTS(@client INT) Returns TABLE
AS
	RETURN (SELECT R_DATE As Date, BRAND + ' ' + MODEL AS Motorcycle
	FROM RENT JOIN MOTORCYCLE ON RENT.FRAME_NO = MOTORCYCLE.FRAME_NO
	WHERE RENT.CLIENT=@client);

GO
-------------------------------------------

GO
CREATE FUNCTION CLIENTS_REVISIONS(@client INT) Returns TABLE
AS
	RETURN (SELECT REVISION_NO As Number, R_DATE As Date, BRAND + ' ' + MODEL AS Motorcycle
	FROM ((REVISION JOIN OWNED_BIKE ON REVISION.FRAME_NO = OWNED_BIKE.FRAME_NO)
	JOIN MOTORCYCLE ON MOTORCYCLE.FRAME_NO=OWNED_BIKE.FRAME_NO)
	WHERE OWNED_BIKE.B_OWNER=@client);

GO
-------------------------------------------

GO
CREATE FUNCTION REVISION_PARTS(@rev_number INT) Returns TABLE
AS
	RETURN (SELECT PART_TEXT As Part
	FROM CHANGED_PARTS JOIN PART ON CHANGED_PARTS.PART=PART.NUMBER
	WHERE CHANGED_PARTS.REVISION_NO=@rev_number);

GO
---------------------------------------------

GO
CREATE FUNCTION SALE_DETAILED (@Invoice INT) Returns TABLE
AS
	RETURN (SELECT BRAND + ' ' +  MODEL AS Motorcycle, CC, HP, C_NAME AS Client, 
	S_NAME AS Seller, STAND.LOCALIZATION AS Stand, PRICE as Price
	FROM (((((SALE JOIN SALESMAN ON SELLER=NUMBER)
	JOIN STAFF_MEMBER ON SALESMAN.NUMBER=STAFF_MEMBER.NUMBER)
	JOIN MOTORCYCLE ON MOTORCYCLE=FRAME_NO)
	JOIN CLIENT ON CLIENT.NIF=SALE.CLIENT)
	JOIN STAND ON SALESMAN.WORK_STAND=STAND.NUMBER)
	WHERE INVOICE_NO=@Invoice);
GO
-- Test Function
-- SELECT * FROM SALE_DETAILED(1001);
------------------------------------------------

GO
CREATE FUNCTION REVISION_DETAILED (@Number INT) Returns TABLE
AS
	RETURN (SELECT BRAND + ' ' + MODEL AS Motorcycle, CC, HP,
	C_NAME AS Owner, S_NAME AS Mechanic, LOCALIZATION as Workshop, PRICE AS Price, COUNT(*) AS Parts
	FROM (((((((REVISION JOIN MECHANIC ON REVISION.MECHANIC=MECHANIC.NUMBER)
	JOIN STAFF_MEMBER ON MECHANIC.NUMBER = STAFF_MEMBER.NUMBER)
	JOIN WORKSHOP ON MECHANIC.WORK_WORKSHOP=WORKSHOP.NUMBER)
	LEFT OUTER JOIN OWNED_BIKE ON REVISION.FRAME_NO=OWNED_BIKE.FRAME_NO)
	JOIN MOTORCYCLE ON MOTORCYCLE.FRAME_NO=REVISION.FRAME_NO)
	LEFT OUTER JOIN CLIENT ON OWNED_BIKE.B_OWNER=CLIENT.NIF)
	JOIN CHANGED_PARTS ON REVISION.REVISION_NO=CHANGED_PARTS.REVISION_NO)
	WHERE REVISION.REVISION_NO=@Number
	GROUP BY LOCALIZATION, S_NAME, BRAND, MODEL, CC, HP, C_NAME, PRICE);
GO
-- Test Function
-- SELECT * FROM REVISION_DETAILED(1020);
------------------------------------------------

GO
CREATE FUNCTION RENT_DETAILED (@Date varchar(20), @Frame varchar(20)) Returns TABLE
AS
	RETURN (SELECT BRAND + ' ' + MODEL AS Motorcycle, CC, HP, C_NAME AS Client,
	LOCALIZATION AS MotoStation, PRICE_KM AS Price
	FROM ((((RENT JOIN MOTORCYCLE ON RENT.FRAME_NO=MOTORCYCLE.FRAME_NO)
	JOIN RENTABLE_BIKE ON RENT.FRAME_NO=RENTABLE_BIKE.FRAME_NO)
	JOIN MOTO_STATION ON RENTABLE_BIKE.MOTO_STATION=MOTO_STATION.NUMBER)
	JOIN CLIENT ON CLIENT.NIF=RENT.CLIENT)
	WHERE R_DATE=CONVERT(Date, @Date, 6) AND (BRAND + ' ' + MODEL)=@Frame);
GO
-- Test Function
-- SELECT * FROM RENT_DETAILED('26 Sep 18', 'BMW CBR');
------------------------------------------------

GO
CREATE FUNCTION MOST_EXPENSIVE_BIKE() Returns @mexp_bike Table(Motorcycle varchar(50), Price INT)
AS
BEGIN
	DECLARE @highest_price AS INT;
	SELECT @highest_price=MAX(PRICE) FROM STOCK_BIKE;

	INSERT @mexp_bike SELECT  BRAND + ' ' + MODEL AS Motorcycle, PRICE AS Price
					  FROM STOCK_BIKE JOIN MOTORCYCLE ON STOCK_BIKE.FRAME_NO=MOTORCYCLE.FRAME_NO
					  WHERE PRICE=@highest_price
	RETURN;
END
GO
-- SELECT * FROM MOST_EXPENSIVE_BIKE()
-----------------------------------------------

GO
CREATE FUNCTION BIKES_TIMES_RENTED() RETURNS TABLE
AS
	RETURN(SELECT BRAND + ' ' + MODEL As Motorcycle, COUNT(MOTORCYCLE.FRAME_NO) As times_rented 
		   FROM RENT JOIN MOTORCYCLE ON RENT.FRAME_NO=MOTORCYCLE.FRAME_NO
		   GROUP BY BRAND + ' ' + MODEL)
GO
------------------------------------------------

GO
CREATE FUNCTION MOST_RENTED_BIKE() RETURNS @most_rented TABLE(Motorcycle varchar(50), Times_Rented INT)
AS
BEGIN
	DECLARE @highest_times AS INT;
	SELECT @highest_times=MAX(times_rented) FROM BIKES_TIMES_RENTED();

	INSERT @most_rented SELECT Motorcycle, times_rented As Times_rented
		   FROM BIKES_TIMES_RENTED()
		   WHERE times_rented=@highest_times;

	RETURN;
END
GO
--SELECT * FROM MOST_RENTED_BIKE()
-----------------------------------------------

GO
CREATE FUNCTION BEST_SALESMAN() RETURNS @highest_sales TABLE(Salesman varchar(60), Total_Sales INT)
AS
BEGIN
	
	DECLARE @sum_sales AS TABLE(Salesman varchar(60), Total_Sum INT);
	DECLARE @highest_sale AS INT;
	INSERT @sum_sales SELECT Salesman, SUM(PRICE) As Highest_sales FROM SALESMAN_SALES GROUP BY Salesman
	SELECT @highest_sale=MAX(Total_Sum) FROM @sum_sales;

	INSERT @highest_sales SELECT Salesman, Total_Sum FROM @sum_sales WHERE Total_Sum=@highest_sale;

	RETURN;
END
GO
-- SELECT * FROM BEST_SALESMAN();
-----------------------------------------------

GO
CREATE FUNCTION BEST_MECHANIC() RETURNS @most_revisions TABLE(Mechanic varchar(60), Revisions INT)
AS
BEGIN
	DECLARE @mechanics AS TABLE (Mechanic varchar(60), Revisions INT);
	DECLARE @most_revision INT;
	INSERT @mechanics SELECT S_NAME, COUNT(MECHANIC)
						FROM REVISION JOIN MECHANIC ON REVISION.MECHANIC=MECHANIC.NUMBER
						JOIN STAFF_MEMBER ON MECHANIC.NUMBER=STAFF_MEMBER.NUMBER
						GROUP BY S_NAME
	
	SELECT @most_revision=MAX(Revisions) FROM @mechanics;
	
	INSERT @most_revisions SELECT TOP 1* FROM @mechanics WHERE Revisions=@most_revision;
	RETURN;
END
GO

-- SELECT * FROM BEST_MECHANIC()
-----------------------------------------------

GO
CREATE FUNCTION AVERAGE_PARTS() RETURNS @avg TABLE(Average FLOAT)
AS 
BEGIN
	DECLARE @parts AS TABLE (Revision INT, Parts INT);
	DECLARE @avrg FLOAT;
	INSERT @parts SELECT REVISION.REVISION_NO AS Revision, COUNT(REVISION.REVISION_NO) AS Parts
		FROM REVISION JOIN CHANGED_PARTS ON REVISION.REVISION_NO=CHANGED_PARTS.REVISION_NO
		GROUP BY REVISION.REVISION_NO

	SELECT @avrg = AVG(Cast(Parts as Float)) FROM @parts
	
	INSERT @avg SELECT @avrg

	RETURN;
END
GO
-- SELECT * FROM AVERAGE_PARTS()
-----------------------------------------------
GO
CREATE FUNCTION MOST_ACTIVE_CLIENT() RETURNS @most_active TABLE(Client varchar(30))
AS 
BEGIN
	DECLARE @times_rented AS TABLE(Client INT, Rented_bikes INT);
	DECLARE @max_times_rented AS INT;
	INSERT @times_rented SELECT CLIENT, COUNT(CLIENT) As Rented_bikes FROM RENT GROUP BY CLIENT;
	SELECT @max_times_rented=MAX(Rented_bikes) FROM @times_rented;
	INSERT @most_active SELECT TOP 1 C_NAME 
		   FROM @times_rented JOIN CLIENT ON CLIENT=CLIENT.NIF  
		   WHERE Rented_bikes=@max_times_rented;
	
	RETURN;
END
GO
-- SELECT * FROM MOST_ACTIVE_CLIENT()
-----------------------------------------------